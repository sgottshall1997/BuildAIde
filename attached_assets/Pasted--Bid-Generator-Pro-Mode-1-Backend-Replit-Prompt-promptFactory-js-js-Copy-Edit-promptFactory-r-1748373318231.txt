 Bid Generator (Pro Mode)
✅ 1. Backend Replit Prompt (promptFactory.js)
js
Copy
Edit
promptFactory.register("bidGenerator", {
  system: `You are a professional construction contract writer (role: senior estimator/legal expert). Draft a formal bid/proposal document with clear legal language and structured payment schedule. Always output JSON. Use contractor-client formal tone.`,
  user: `Create a bid for client "{{clientName}}" from contractor "{{contractorName}}". Project: {{projectDescription}}. Total bid amount: ${{totalBid}}. Start date: {{startDate}}. Payment terms: {{paymentTerms}}. Include scope of work (inclusions: {{inclusions}}, exclusions: {{exclusions}}), legal clauses (e.g., dispute resolution, termination, change orders), and any optional clauses: {{optionalClauses}}.`
});
🧾 Required Inputs:

clientName, contractorName

projectDescription, totalBid, startDate

paymentTerms (e.g., "20% upfront, 30% mid-project, 50% on completion")

inclusions, exclusions (string or array)

optionalClauses (array, e.g., ["warranty", "force majeure"])

🔐 Temp: 0.2
Use JSON.parse() and validate for keys like TotalBid, PaymentSchedule, and Line Items.

✅ 2. Expected Output JSON
json
Copy
Edit
{
  "Top Insight": "Formal bid for HVAC installation with a $50,000 total and milestone payments.",
  "Line Items": [
    { "description": "Equipment supply", "amount": 20000 },
    { "description": "Labor and installation", "amount": 30000 }
  ],
  "PaymentSchedule": [
    { "milestone": "Mobilization", "dueDate": "2025-07-01", "amount": "20%" },
    { "milestone": "Mid-project", "dueDate": "2025-08-15", "amount": "30%" },
    { "milestone": "Completion", "dueDate": "2025-09-30", "amount": "50%" }
  ],
  "ContractClauses": [
    "Scope of Work", "Change Orders", "Termination", "Force Majeure", "Warranty"
  ],
  "TotalBid": 50000,
  "SummaryMarkdown": "XYZ Construction LLC proposes to complete the project with a phased payment plan and all materials included.",
  "Warnings": ["This is a sample contract. Consult legal counsel before use."]
}
✅ 3. Frontend (React + TailwindCSS)
💡 Summary + Line Items
jsx
Copy
Edit
<div className="bg-blue-50 p-4 rounded shadow mb-4">
  <p className="font-semibold">{TopInsight}</p>
  <p>Total Bid: ${TotalBid.toLocaleString()}</p>
</div>

<table className="w-full table-auto mt-2">
  <thead><tr><th>Line Item</th><th>Amount</th></tr></thead>
  <tbody>
    {LineItems.map((item, idx) => (
      <tr key={idx}>
        <td>{item.description}</td>
        <td>${item.amount.toLocaleString()}</td>
      </tr>
    ))}
  </tbody>
</table>
🗓 Payment Schedule Timeline
jsx
Copy
Edit
<div className="mt-4">
  <h3 className="text-md font-semibold mb-2">Payment Schedule</h3>
  <ul className="list-disc ml-6">
    {PaymentSchedule.map((milestone, idx) => (
      <li key={idx}>{milestone.milestone}: {milestone.amount} due on {milestone.dueDate}</li>
    ))}
  </ul>
</div>
📜 Clauses + Warnings
jsx
Copy
Edit
<div className="mt-4">
  <h4 className="font-semibold">Contract Clauses</h4>
  <ul className="list-disc ml-6">{ContractClauses.map((clause, idx) => <li key={idx}>{clause}</li>)}</ul>
</div>

{Warnings?.length > 0 && (
  <div className="mt-4 text-red-600 bg-red-50 p-3 rounded">
    {Warnings.map((w, i) => <p key={i}>⚠ {w}</p>)}
  </div>
)}
✅ 4. Error Handling & Fallbacks
If paymentTerms, startDate, or optionalClauses are missing, allow GPT to:

Assume defaults like “30% upfront, 40% mid-project, 30% on completion”

Add "This clause was inferred" to Warnings

If JSON is malformed → retry with "Return only valid JSON with required keys like TotalBid and PaymentSchedule."

⭐ Bonus Features
📄 PDF Generator: Use this output to create a branded PDF bid document

🖋 E-signature Workflow: “Send this bid to client for approval”

📅 Kickoff Calendar Integration: Add startDate as event

🔁 Bid from Estimate: Automatically use data from Project Estimator to prefill this