Here‚Äôs your full Replit AI Agent prompt to build the three smart upgrades ‚Äî clear, practical, and framed for your construction estimator tool:

‚∏ª

‚úÖ REPLIT PROMPT: Add High-Impact Utility Features to ConstructionSmartTools

Project: ConstructionSmartTools
Goal: Add practical, user-friendly features to improve professionalism, speed, and data accuracy in the estimator app. These features should feel seamless to non-technical users and require no backend UI changes.

‚∏ª

üîπ 1. One-Click AI Client Email Generator

Location: Add to final estimate confirmation page (after bid is generated)
Functionality:
	‚Ä¢	Add a ‚Äúüìß Generate Client Email‚Äù button
	‚Ä¢	When clicked, it sends the full estimate object to the GPT API
	‚Ä¢	GPT returns a professional, polite email message explaining the quote

Prompt Example (for GPT):

You are a professional construction estimator. Write a client-ready email based on the following project estimate. Explain the cost clearly and professionally, highlight key details (materials, size, timeline), and end with a friendly call to action.

Project Details:
[INSERT ESTIMATE OBJECT HERE]

UI Output:
	‚Ä¢	Clean formatted paragraph
	‚Ä¢	‚ÄúCopy‚Äù button below
	‚Ä¢	Optional: ‚ÄúSend Email‚Äù if SMTP is enabled

‚∏ª

üîπ 2. Nodemailer Email Notifications (Real Email System)

Use Cases:
	‚Ä¢	Permit scheduling reminders
	‚Ä¢	Follow-up alerts on open estimates
	‚Ä¢	Notifications to admin@shallsconstruction.com

Setup:
	‚Ä¢	Use Nodemailer with SMTP (Gmail, Outlook, or SMTP2GO)
	‚Ä¢	Add email template module (title, message, link)
	‚Ä¢	Trigger email:
	‚Ä¢	When estimate is submitted
	‚Ä¢	When a permit/inspection is scheduled

ENV variables required:

EMAIL_USER=
EMAIL_PASS=
SMTP_HOST=
SMTP_PORT=



‚∏ª

üîπ 3. Google Maps ZIP Code API Integration

Location: Estimator form (under ‚ÄúZIP code‚Äù or ‚ÄúProject Location‚Äù)
Behavior:
	‚Ä¢	As user types ZIP ‚Üí call Google Maps Geocoding API
	‚Ä¢	Autofill: city, state, optional address
	‚Ä¢	If invalid ZIP ‚Üí show red border + error message

Setup:
	‚Ä¢	Enable Google Maps Geocoding API
	‚Ä¢	Add frontend fetch to endpoint
	‚Ä¢	API Key stored in .env:

GOOGLE_MAPS_API_KEY=

Bonus: Use distance from HQ to location (optional future enhancement)

‚∏ª

Output Guidelines:
	‚Ä¢	Keep UI clean and mobile-friendly
	‚Ä¢	All new features should blend with the existing React + Tailwind UI
	‚Ä¢	Use async loading states or subtle animations for loading responses

Let me know if you need the exact code for any one of these features. I can drop that in next.