
# REPLIT PROMPT: Real Estate Property Data Integration

## ROLE
You are a Full-Stack Developer specializing in real estate data integration and web scraping. You're building a property search system for a construction/renovation business that needs to find flip opportunities and renovation projects.

## OBJECTIVE
Build a robust property data collection system that integrates with legitimate real estate APIs and data sources, replacing mock data with real property listings for the Lead Finder tool in ConstructionSmartTools.

## TECHNICAL REQUIREMENTS

### 1. Data Sources Integration (Choose Best Available)
- **RentSpree API** - Real estate listings API
- **RealtyMole API** - Property data and market analytics
- **Mashvisor API** - Investment property data
- **Bridge Interactive API** - MLS data access
- **Estated API** - Property details and history
- **Fallback**: Web scraping with proper rate limiting and compliance

### 2. Core Features to Implement

#### A. Property Search API Endpoint
```typescript
// Enhance existing /api/fetch-local-listings endpoint
interface PropertySearchParams {
  zipCode: string;
  minPrice?: number;
  maxPrice?: number;
  minSqft?: number;
  maxSqft?: number;
  maxDaysOnMarket?: number;
  propertyTypes?: string[];
  renovationPotential?: 'high' | 'medium' | 'low';
}
```

#### B. Data Enrichment Pipeline
- Property photos and virtual tours
- Market value estimates (ARV calculation)
- Renovation cost estimates based on property condition
- Neighborhood analytics and trends
- School districts and crime data
- Recent sales comps

#### C. Flip Analysis Engine
- ROI calculations with market data
- Renovation scope estimation
- Timeline projections
- Risk assessment based on market conditions

### 3. Implementation Structure

#### Backend Files to Create/Modify:
1. `server/propertyDataService.ts` - Main data fetching service
2. `server/propertyAnalysis.ts` - AI-powered property analysis
3. `server/marketDataCollector.ts` - Market trends and comps
4. Update `server/routes.ts` - Enhanced property endpoints

#### Frontend Enhancements:
1. Update `client/src/pages/lead-finder.tsx` - Real data integration
2. Create `client/src/components/property-map.tsx` - Interactive map view
3. Enhance property cards with real photos and data

### 4. API Integration Priority List

#### Option 1: RentSpree API (Recommended)
```javascript
// Example integration
const fetchRentSpreeListings = async (searchParams) => {
  const response = await fetch('https://api.rentspree.com/v1/listings', {
    headers: {
      'Authorization': `Bearer ${process.env.RENTSPREE_API_KEY}`,
      'Content-Type': 'application/json'
    },
    method: 'POST',
    body: JSON.stringify({
      location: searchParams.zipCode,
      price_min: searchParams.minPrice,
      price_max: searchParams.maxPrice,
      // ... other params
    })
  });
  return response.json();
};
```

#### Option 2: RealtyMole API
```javascript
// Property search with market data
const fetchRealtyMoleData = async (zipCode) => {
  const listings = await fetch(`https://api.realtymole.com/v1/listings?zipcode=${zipCode}`, {
    headers: { 'X-API-Key': process.env.REALTYMOLE_API_KEY }
  });
  
  const marketData = await fetch(`https://api.realtymole.com/v1/market-data?zipcode=${zipCode}`, {
    headers: { 'X-API-Key': process.env.REALTYMOLE_API_KEY }
  });
  
  return { listings: listings.json(), market: marketData.json() };
};
```

#### Option 3: Web Scraping (Last Resort)
```javascript
// Ethical scraping with rate limiting
const scrapePropertyData = async (searchUrl) => {
  // Implement with puppeteer/playwright
  // Add proper delays and respect robots.txt
  // Cache results to minimize requests
  // Use rotating proxies if needed
};
```

### 5. Data Processing Pipeline

#### Property Data Standardization
```typescript
interface StandardizedProperty {
  id: string;
  address: string;
  price: number;
  sqft: number;
  bedrooms: number;
  bathrooms: number;
  propertyType: string;
  daysOnMarket: number;
  photos: string[];
  description: string;
  // Enhanced fields
  mls_id?: string;
  lot_size?: number;
  year_built?: number;
  estimated_arv?: number;
  renovation_score?: number;
  market_trends?: MarketTrends;
  nearby_sales?: RecentSale[];
}
```

#### AI Enhancement Integration
```javascript
// Enhance each property with AI analysis
const enhancePropertyWithAI = async (property) => {
  const aiAnalysis = await openai.chat.completions.create({
    model: "gpt-4o",
    messages: [{
      role: "system",
      content: "You are a real estate investment expert. Analyze this property for flip potential."
    }, {
      role: "user", 
      content: `Analyze this property: ${JSON.stringify(property)}`
    }],
    response_format: { type: "json_object" }
  });
  
  return {
    ...property,
    ai_flip_score: aiAnalysis.score,
    renovation_recommendations: aiAnalysis.recommendations,
    risk_factors: aiAnalysis.risks
  };
};
```

### 6. Caching and Performance

#### Redis/File-based Caching
```javascript
// Cache expensive API calls
const getCachedPropertyData = async (cacheKey) => {
  const cached = await readFromCache(cacheKey);
  if (cached && isValidCache(cached.timestamp)) {
    return cached.data;
  }
  
  const freshData = await fetchFromAPI();
  await saveToCache(cacheKey, freshData);
  return freshData;
};
```

### 7. Legal Compliance

#### Rate Limiting
- Implement exponential backoff
- Respect API rate limits (typically 1000-5000 requests/month)
- Add request queuing for high-volume searches

#### Terms of Service Compliance
- Review each data source's ToS
- Implement proper attribution
- Cache data appropriately
- Don't resell raw data

### 8. Environment Variables to Add
```env
# API Keys
RENTSPREE_API_KEY=your_key_here
REALTYMOLE_API_KEY=your_key_here
MASHVISOR_API_KEY=your_key_here
ESTATED_API_KEY=your_key_here

# Scraping (if needed)
PROXY_ROTATION_SERVICE=your_service_here
SCRAPING_USER_AGENT=your_user_agent

# Caching
PROPERTY_CACHE_DURATION=3600000  # 1 hour in ms
```

### 9. Testing Strategy

#### Mock Data for Development
- Keep existing mock data for demo mode
- Create realistic test datasets
- Add property data validation

#### API Error Handling
```javascript
const robustPropertyFetch = async (params) => {
  try {
    // Try primary API
    return await primaryAPI.fetch(params);
  } catch (error) {
    console.log('Primary API failed, trying backup...');
    try {
      // Try backup API
      return await backupAPI.fetch(params);
    } catch (backupError) {
      console.log('All APIs failed, using cached/mock data');
      return await getMockOrCachedData(params);
    }
  }
};
```

### 10. Success Metrics

#### User Experience
- Properties load within 3 seconds
- Real photos and accurate data
- Flip analysis includes actual market comps
- Search results match user criteria precisely

#### Business Value
- 50+ real properties per ZIP code search
- Accurate ARV estimates within 10% of market
- AI flip scores correlate with actual profit potential
- Lead conversion improves with better data quality

## IMPLEMENTATION PHASES

### Phase 1: API Integration (Week 1)
1. Sign up for RentSpree/RealtyMole APIs
2. Build data fetching service
3. Replace mock data in lead-finder
4. Add basic error handling

### Phase 2: Data Enhancement (Week 2)
1. Add property photos and details
2. Implement AI flip analysis
3. Create market trends integration
4. Build property comparison features

### Phase 3: Performance & Scale (Week 3)
1. Implement caching system
2. Add rate limiting and queuing
3. Optimize for mobile performance
4. Add advanced filtering options

### Phase 4: Advanced Features (Week 4)
1. Interactive property maps
2. Automated property alerts
3. Portfolio tracking integration
4. Market analytics dashboard

## DELIVERABLES

1. **Enhanced Lead Finder** - Real property data integration
2. **Property Analysis API** - AI-powered flip assessment
3. **Market Data Dashboard** - Trends and analytics
4. **Admin Panel** - API monitoring and data quality checks

## LEGAL CONSIDERATIONS

- **Use legitimate APIs first** - Avoid scraping when possible
- **Respect rate limits** - Don't overwhelm data sources
- **Cache appropriately** - Reduce API calls while staying compliant
- **Attribution** - Credit data sources as required
- **User consent** - Inform users about data sources

This approach will give you professional-grade property data while maintaining legal compliance and excellent user experience.