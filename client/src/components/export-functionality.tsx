import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Download, FileText, FileSpreadsheet, Loader2, Mail, Copy, Sparkles, Edit3 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface ExportData {
  projectType: string;
  area: number;
  materialQuality: string;
  timeline: string;
  estimatedCost: number;
  breakdown?: any[];
  pastProjects?: any[];
  riskAssessment?: any;
  zipCode?: string;
  description?: string;
}

interface ExportFunctionalityProps {
  data: ExportData;
  onEmailDraft?: () => void;
}

export default function ExportFunctionality({ data, onEmailDraft }: ExportFunctionalityProps) {
  const [exportFormat, setExportFormat] = useState<string>("");
  const [isExporting, setIsExporting] = useState(false);
  const [improvedText, setImprovedText] = useState<string>("");
  const [isImprovingText, setIsImprovingText] = useState(false);
  const { toast } = useToast();

  const handleExport = async () => {
    if (!exportFormat) return;
    
    // Check if in demo mode
    if (import.meta.env.VITE_DEMO_MODE) {
      const { toast } = await import("@/hooks/use-toast");
      toast({
        title: "ðŸ”’ Demo Mode",
        description: "Export functionality is disabled in demo mode. In production, this would generate downloadable files.",
      });
      return;
    }
    
    setIsExporting(true);
    try {
      const response = await fetch("/api/export-estimate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          format: exportFormat,
          data: data
        }),
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        
        const timestamp = new Date().toISOString().slice(0, 10);
        const filename = `estimate_${data.projectType}_${timestamp}.${exportFormat === 'pdf' ? 'pdf' : 'xlsx'}`;
        a.download = filename;
        
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } else {
        console.error("Export failed");
      }
    } catch (error) {
      console.error("Error exporting:", error);
    } finally {
      setIsExporting(false);
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const handleCopyToClipboard = async () => {
    const bidContent = `PROJECT ESTIMATE
    
Project Type: ${data.projectType}
Area: ${data.area?.toLocaleString() || '0'} sq ft
Material Quality: ${data.materialQuality}
Timeline: ${data.timeline}
Total Estimated Cost: ${formatCurrency(data.estimatedCost)}

${data.description ? `Description: ${data.description}` : ''}

Generated by ConstructionSmartTools - Professional Construction Estimating`;

    try {
      await navigator.clipboard.writeText(bidContent);
      toast({
        title: "ðŸ“‹ Copied to Clipboard",
        description: "Estimate details have been copied to your clipboard.",
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Could not copy to clipboard. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleImproveWording = async () => {
    setIsImprovingText(true);
    
    try {
      // For demo mode, show a mock improved version
      if (import.meta.env.VITE_DEMO_MODE) {
        setTimeout(() => {
          setImprovedText(`Here's a polished version of your project description:

We propose to complete this ${data.projectType.toLowerCase()} project with exceptional craftsmanship, efficient project management, and transparent pricing. Our team will deliver high-quality results within the specified ${data.timeline.toLowerCase()} timeline, utilizing ${data.materialQuality.toLowerCase()} materials to ensure lasting value and client satisfaction.

Our comprehensive approach includes detailed project planning, regular progress updates, and adherence to all safety and building code requirements. We're committed to exceeding your expectations while maintaining competitive pricing.`);
          
          toast({
            title: "ðŸ§  AI Enhanced Your Description",
            description: "Your project description has been professionally polished.",
          });
          setIsImprovingText(false);
        }, 2000);
        return;
      }

      // In production, this would call the AI API
      const response = await fetch("/api/improve-text", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          text: data.description || `${data.projectType} project covering ${data.area} sq ft with ${data.materialQuality} materials`,
          context: "construction bid proposal"
        }),
      });

      if (response.ok) {
        const result = await response.json();
        setImprovedText(result.improvedText);
        toast({
          title: "ðŸ§  AI Enhanced Your Text",
          description: "Your content has been professionally polished.",
        });
      }
    } catch (error) {
      toast({
        title: "Enhancement Failed",
        description: "Could not improve text. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsImprovingText(false);
    }
  };

  return (
    <Card className="mt-6">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Download className="h-5 w-5" />
          Export & Share
        </CardTitle>
        <CardDescription>
          Export your estimate as PDF or spreadsheet, or draft a professional email
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          {/* UX Guidance Banner */}
          <div className="bg-yellow-50 border border-yellow-200 text-yellow-800 p-3 rounded-lg text-sm">
            <div className="flex items-center gap-2">
              <Edit3 className="w-4 h-4" />
              <span className="font-medium">Pro Tip:</span>
              <span>Use the buttons below to copy your estimate details, improve wording with AI, or export professional documents.</span>
            </div>
          </div>

          {/* Quick Actions */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
            <Button
              onClick={handleCopyToClipboard}
              variant="outline"
              className="flex items-center gap-2"
            >
              <Copy className="w-4 h-4" />
              Copy to Clipboard
            </Button>
            
            <Button
              onClick={handleImproveWording}
              disabled={isImprovingText}
              variant="outline"
              className="flex items-center gap-2 bg-purple-50 hover:bg-purple-100 border-purple-200 text-purple-700"
            >
              {isImprovingText ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin" />
                  Improving...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4" />
                  Improve Wording (AI)
                </>
              )}
            </Button>

            {onEmailDraft && (
              <Button variant="outline" onClick={onEmailDraft} className="flex items-center gap-2">
                <Mail className="w-4 h-4" />
                Draft Email
              </Button>
            )}
          </div>

          {/* AI Improved Text Display */}
          {improvedText && (
            <div className="p-4 bg-purple-50 border border-purple-200 rounded-lg">
              <h4 className="font-medium text-purple-900 mb-2 flex items-center gap-2">
                <Sparkles className="w-4 h-4" />
                AI-Enhanced Description
              </h4>
              <div className="text-sm text-purple-800 whitespace-pre-wrap">
                {improvedText}
              </div>
              <Button
                onClick={() => {
                  navigator.clipboard.writeText(improvedText);
                  toast({
                    title: "âœ¨ Improved Text Copied",
                    description: "AI-enhanced description copied to clipboard.",
                  });
                }}
                size="sm"
                variant="outline"
                className="mt-3 text-purple-700 border-purple-300 hover:bg-purple-100"
              >
                <Copy className="w-3 h-3 mr-1" />
                Copy Improved Text
              </Button>
            </div>
          )}

          {/* Export Summary */}
          <div className="p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
            <h4 className="font-medium mb-3">Export Summary</h4>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <p className="text-gray-600 dark:text-gray-400">Project Type</p>
                <p className="font-medium capitalize">{data.projectType}</p>
              </div>
              <div>
                <p className="text-gray-600 dark:text-gray-400">Area</p>
                <p className="font-medium">{data.area?.toLocaleString() || '0'} sq ft</p>
              </div>
              <div>
                <p className="text-gray-600 dark:text-gray-400">Quality</p>
                <Badge variant="outline" className="capitalize">{data.materialQuality}</Badge>
              </div>
              <div>
                <p className="text-gray-600 dark:text-gray-400">Total Cost</p>
                <p className="font-semibold text-primary">{formatCurrency(data.estimatedCost)}</p>
              </div>
            </div>
          </div>

          {/* Export Options */}
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-3">
                <label className="text-sm font-medium">Export Format</label>
                <Select value={exportFormat} onValueChange={setExportFormat}>
                  <SelectTrigger>
                    <SelectValue placeholder="Choose export format" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="pdf">
                      <div className="flex items-center gap-2">
                        <FileText className="h-4 w-4" />
                        PDF Report
                      </div>
                    </SelectItem>
                    <SelectItem value="xlsx">
                      <div className="flex items-center gap-2">
                        <FileSpreadsheet className="h-4 w-4" />
                        Excel Spreadsheet
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex flex-col justify-end">
                <Button 
                  onClick={handleExport}
                  disabled={!exportFormat || isExporting}
                  className="w-full"
                >
                  {isExporting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Exporting...
                    </>
                  ) : (
                    <>
                      <Download className="mr-2 h-4 w-4" />
                      Export {exportFormat?.toUpperCase()}
                    </>
                  )}
                </Button>
              </div>
            </div>
          </div>

          {/* Export Content Preview */}
          {exportFormat && (
            <div className="p-4 border rounded-lg">
              <h4 className="font-medium mb-3">
                {exportFormat === 'pdf' ? 'PDF Report' : 'Excel Spreadsheet'} will include:
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Project details and specifications</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Cost breakdown by category</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Timeline and phase breakdown</span>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Market benchmark comparison</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Similar past projects data</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span>Risk assessment and recommendations</span>
                  </div>
                </div>
              </div>
              
              {exportFormat === 'pdf' && (
                <div className="mt-3 p-3 bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded">
                  <p className="text-xs text-blue-700 dark:text-blue-300">
                    PDF will be professionally formatted with Shall's Construction branding and ready for client presentation.
                  </p>
                </div>
              )}
              
              {exportFormat === 'xlsx' && (
                <div className="mt-3 p-3 bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded">
                  <p className="text-xs text-green-700 dark:text-green-300">
                    Excel file will include multiple sheets with detailed calculations, formulas, and editable cost breakdowns.
                  </p>
                </div>
              )}
            </div>
          )}

          {/* Additional Features Note */}
          <div className="text-center pt-4 border-t">
            <p className="text-xs text-gray-500">
              âœ¨ AI beta features - Results may vary. Professional judgment recommended.
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}