import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { 
  Copy, 
  Download, 
  FileText, 
  Printer, 
  Share2,
  CheckCircle 
} from "lucide-react";

interface ExportData {
  title: string;
  data: any;
  projectDetails?: Record<string, any>;
  timestamp?: Date;
}

interface ResultsExportProps {
  data: ExportData;
  className?: string;
  compact?: boolean;
}

export function ResultsExport({ data, className = "", compact = false }: ResultsExportProps) {
  const [isExporting, setIsExporting] = useState(false);
  const [isCopying, setIsCopying] = useState(false);
  const { toast } = useToast();

  const formatForCopy = (exportData: ExportData): string => {
    const timestamp = exportData.timestamp || new Date();
    const lines = [
      `${exportData.title}`,
      `Generated: ${timestamp.toLocaleDateString()} at ${timestamp.toLocaleTimeString()}`,
      `\n${'='.repeat(50)}\n`
    ];

    // Add project details if available
    if (exportData.projectDetails) {
      lines.push('PROJECT DETAILS:');
      Object.entries(exportData.projectDetails).forEach(([key, value]) => {
        lines.push(`${key}: ${value}`);
      });
      lines.push('\n');
    }

    // Format different data types
    if (exportData.data.lowEnd && exportData.data.highEnd) {
      // Cost estimate format
      lines.push(`COST ESTIMATE:`);
      lines.push(`Range: $${exportData.data.lowEnd.toLocaleString()} - $${exportData.data.highEnd.toLocaleString()}`);
      lines.push(`Per Sq Ft: $${exportData.data.perSqFt || 'N/A'}`);
      
      if (exportData.data.explanation) {
        lines.push(`\nEXPLANATION:`);
        lines.push(exportData.data.explanation);
      }
      
      if (exportData.data.keyFactors) {
        lines.push('\nKEY FACTORS:');
        exportData.data.keyFactors.forEach((factor: string) => {
          lines.push(`â€¢ ${factor}`);
        });
      }
    } else if (exportData.data.totalCost) {
      // Detailed estimate format
      lines.push(`TOTAL COST: $${exportData.data.totalCost.toLocaleString()}`);
      
      if (exportData.data.breakdown) {
        lines.push('\nCOST BREAKDOWN:');
        Object.entries(exportData.data.breakdown).forEach(([key, value]: [string, any]) => {
          lines.push(`${key.charAt(0).toUpperCase() + key.slice(1)}: $${value.toLocaleString()}`);
        });
      }
    } else if (exportData.data.roiPercentage !== undefined) {
      // ROI calculation format
      lines.push(`ROI CALCULATION:`);
      lines.push(`Purchase Price: $${exportData.data.purchasePrice?.toLocaleString() || 'N/A'}`);
      lines.push(`Rehab Budget: $${exportData.data.rehabBudget?.toLocaleString() || 'N/A'}`);
      lines.push(`Total Investment: $${exportData.data.totalInvestment?.toLocaleString() || 'N/A'}`);
      lines.push(`ROI Percentage: ${exportData.data.roiPercentage?.toFixed(2)}%`);
    } else if (Array.isArray(exportData.data)) {
      // Quote comparison format
      lines.push(`QUOTE COMPARISON:`);
      exportData.data.forEach((quote: any, index: number) => {
        lines.push(`\nQuote ${index + 1}: ${quote.contractor || `Contractor ${index + 1}`}`);
        lines.push(`Cost: $${quote.totalCost?.toLocaleString() || 'N/A'}`);
        if (quote.recommendation) {
          lines.push(`Recommendation: ${quote.recommendation}`);
        }
      });
    } else {
      // Generic format
      lines.push('RESULTS:');
      if (typeof exportData.data === 'string') {
        lines.push(exportData.data);
      } else {
        lines.push(JSON.stringify(exportData.data, null, 2));
      }
    }

    lines.push(`\n${'='.repeat(50)}`);
    lines.push(`Generated by ConstructionSmartTools`);

    return lines.join('\n');
  };

  const copyToClipboard = async () => {
    setIsCopying(true);
    try {
      const textToCopy = formatForCopy(data);
      await navigator.clipboard.writeText(textToCopy);
      
      toast({
        title: "Copied to Clipboard!",
        description: "Your results are ready to paste anywhere.",
      });
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy to clipboard. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsCopying(false);
    }
  };

  const downloadAsText = () => {
    setIsExporting(true);
    try {
      const content = formatForCopy(data);
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${data.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${Date.now()}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Downloaded!",
        description: "Your results have been saved as a text file.",
      });
    } catch (error) {
      toast({
        title: "Download Failed",
        description: "Unable to save file. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsExporting(false);
    }
  };

  const printResults = () => {
    try {
      const printContent = formatForCopy(data);
      const printWindow = window.open('', '_blank');
      
      if (printWindow) {
        printWindow.document.write(`
          <!DOCTYPE html>
          <html>
            <head>
              <title>${data.title}</title>
              <style>
                body { 
                  font-family: Arial, sans-serif; 
                  line-height: 1.6; 
                  margin: 20px; 
                  color: #333;
                }
                h1 { color: #2563eb; margin-bottom: 20px; }
                pre { 
                  white-space: pre-wrap; 
                  font-family: inherit;
                  background: #f8f9fa;
                  padding: 15px;
                  border-radius: 8px;
                }
              </style>
            </head>
            <body>
              <h1>${data.title}</h1>
              <pre>${printContent}</pre>
            </body>
          </html>
        `);
        printWindow.document.close();
        printWindow.focus();
        printWindow.print();
        printWindow.close();
      }
    } catch (error) {
      toast({
        title: "Print Failed",
        description: "Unable to open print dialog. Please try again.",
        variant: "destructive",
      });
    }
  };

  if (compact) {
    return (
      <div className={`flex items-center gap-2 ${className}`}>
        <Button
          variant="outline"
          size="sm"
          onClick={copyToClipboard}
          disabled={isCopying}
          className="flex items-center gap-1"
        >
          {isCopying ? (
            <CheckCircle className="h-3 w-3 text-green-600" />
          ) : (
            <Copy className="h-3 w-3" />
          )}
          {isCopying ? 'Copied!' : 'Copy'}
        </Button>
        
        <Button
          variant="outline"
          size="sm"
          onClick={downloadAsText}
          disabled={isExporting}
          className="flex items-center gap-1"
        >
          <Download className="h-3 w-3" />
          {isExporting ? 'Saving...' : 'Save'}
        </Button>
      </div>
    );
  }

  return (
    <Card className={`border-slate-200 bg-slate-50 ${className}`}>
      <CardContent className="p-4">
        <div className="flex items-center gap-2 mb-3">
          <Share2 className="h-4 w-4 text-slate-600" />
          <h3 className="font-medium text-slate-900">Export & Share</h3>
        </div>
        
        <div className="grid grid-cols-3 gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={copyToClipboard}
            disabled={isCopying}
            className="flex items-center gap-2"
          >
            {isCopying ? (
              <CheckCircle className="h-4 w-4 text-green-600" />
            ) : (
              <Copy className="h-4 w-4" />
            )}
            {isCopying ? 'Copied!' : 'Copy'}
          </Button>

          <Button
            variant="outline"
            size="sm"
            onClick={downloadAsText}
            disabled={isExporting}
            className="flex items-center gap-2"
          >
            <FileText className="h-4 w-4" />
            {isExporting ? 'Saving...' : 'Save'}
          </Button>

          <Button
            variant="outline"
            size="sm"
            onClick={printResults}
            className="flex items-center gap-2"
          >
            <Printer className="h-4 w-4" />
            Print
          </Button>
        </div>
        
        <p className="text-xs text-slate-500 mt-2 text-center">
          Save, share, or print your results
        </p>
      </CardContent>
    </Card>
  );
}